// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	google_golang_orggrpc "google.golang.org/grpc"

	grpc "github.com/DenisKnez/management/user/service/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockTodoServiceClient is an autogenerated mock type for the TodoClient type
type MockTodoServiceClient struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: ctx, in, opts
func (_m *MockTodoServiceClient) CreateTodo(ctx context.Context, in *grpc.CreateTodoRequest, opts ...google_golang_orggrpc.CallOption) (*grpc.CreateTodoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.CreateTodoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.CreateTodoRequest, ...google_golang_orggrpc.CallOption) *grpc.CreateTodoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.CreateTodoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.CreateTodoRequest, ...google_golang_orggrpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadFile provides a mock function with given fields: ctx, opts
func (_m *MockTodoServiceClient) UploadFile(ctx context.Context, opts ...google_golang_orggrpc.CallOption) (grpc.Todo_UploadFileClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 grpc.Todo_UploadFileClient
	if rf, ok := ret.Get(0).(func(context.Context, ...google_golang_orggrpc.CallOption) grpc.Todo_UploadFileClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.Todo_UploadFileClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...google_golang_orggrpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockTodoServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTodoServiceClient creates a new instance of MockTodoServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTodoServiceClient(t mockConstructorTestingTNewMockTodoServiceClient) *MockTodoServiceClient {
	mock := &MockTodoServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
